package planificadorcarga;

import excelIO.excelIO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.text.TableView.TableRow;

/**
 *
 * @author Agile 2016
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClasses = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/planificadorcarga/uniteclogo_172x84nueva.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        jLabel1.setText("Planificador de Carga Académica");

        jTextField1.setName("classRooms"); // NOI18N

        jLabel3.setText("Número de Aulas");

        jToggleButton1.setBackground(new java.awt.Color(204, 255, 204));
        jToggleButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jToggleButton1.setForeground(new java.awt.Color(0, 153, 153));
        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/planificadorcarga/import.PNG"))); // NOI18N
        jToggleButton1.setText("    Importar Archivo");
        jToggleButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 290, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(363, 363, 363))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Home", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setText("Horario");

        tableClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Clase", "Hora", "Aula", "Maestro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClasses);

        jLabel5.setText("Estudiantes");

        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Carrera", "Clases", "Satisfacción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableStudents);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 231, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel5)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Result", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        excelIO e = new excelIO();
        JFileChooser fc = new JFileChooser();
        int flag = fc.showOpenDialog(null);
        File file = new File("");
        students = new ArrayList();
        teachers = new ArrayList();
        classes = new ArrayList();
        students_classes = new ArrayList();
        teachers_classes = new ArrayList();
        if (flag != 1 && !"".equals(jTextField1.getText())) {
            file = fc.getSelectedFile();
            e = new excelIO(file);
            classRoomNumber = Integer.parseInt(jTextField1.getText());
            students = e.getStudents();
            teachers = e.getTeachers();
            teacherSchedule = new int[teachers.size()][9];
            studentSchedule = new int[students.size()][9];
            roomSchedule = new int[9][classRoomNumber];
            studentAverage = new double[students.size()];
            classes = e.getClasses();
            long time1 = System.nanoTime();
            organizeCTS();

            fillSchedule();//cache for schedules of teachers
            sortClasses(0, classes.size() - 1);
            getPlanningDynamic();
            calculateAverages();
            System.out.println("Tiempo de Ejecucion: " + (System.nanoTime() - time1) * 0.000000001 + " segundos");
            addResultTables();
            e.writeBook(classes, students, studentAverage);

        } else {
            JOptionPane.showMessageDialog(rootPane, "No ha seleccionado ningun archivo");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    public void addResultTables() {
        Object[] data = new Object[5];

        DefaultTableModel model = new DefaultTableModel();
        String header[] = new String[]{"Codigo", "Clase", "Hora",
            "Aula", "Maestro"};
        model.setColumnIdentifiers(header);
        tableClasses.setModel(model);
        for (int i = 0; i < classes.size(); i++) {
            if (!"".equals(classes.get(i).getHour()) && classes.get(i).getTeacher() != null && !"".equals(classes.get(i).getClassRoom()) && !classes.get(i).getStudents().isEmpty()) {
                data[0] = i + 1;
                data[1] = classes.get(i).getName();
                data[2] = classes.get(i).getHour();
                data[3] = classes.get(i).getClassRoom();
                data[4] = classes.get(i).getTeacher().getName() + " " + classes.get(i).getTeacher().getLast_name();
                model.addRow(data);
            }

        }
        DefaultTableModel studentModel = new DefaultTableModel();
        header = new String[]{"Nombre", "Carrera", "Clases", "Satisfaccion"};
        studentModel.setColumnIdentifiers(header);

        tableStudents.setModel(studentModel);
        TableColumn showColumn = tableStudents.getColumnModel().getColumn(2);
        buttonCell b = new buttonCell(classes);

        showColumn.setCellEditor(b);
        for (int i = 0; i < students.size(); i++) {
            Object[] studentInfo = new Object[4];
            studentInfo[0] = students.get(i).getName() + " " + students.get(i).getLast_name();
            studentInfo[1] = students.get(i).getCareer();
            studentInfo[2] = students.get(i);
            studentInfo[3] = studentAverage[i];
            studentModel.addRow(studentInfo);
        }

    }

    public void organizeCTS() {
        int size = classes.size();
        int i, j;
        for (i = 0; i < size; i++) {
            students_classes.add(new ArrayList());
            teachers_classes.add(new ArrayList());
        }// Initialize every array
        for (i = 0; i < size; i++) {
            String class_name = classes.get(i).getName();
            for (j = 0; j < teachers.size(); j++) {
                if (teachers.get(j).givesClass(class_name)) {
                    teachers_classes.get(i).add(teachers.get(j));
                }
            }
            for (j = 0; j < students.size(); j++) {
                if (students.get(j).hasClass(class_name)) {

                    students_classes.get(i).add(students.get(j));
                }
            }
        }// Adds every teacher and student to their corresponding class
        for (i = size - 1; i > -1; i--) {
            if (teachers_classes.get(i).isEmpty() || students_classes.get(i).isEmpty()) {
                removeCTS(i);
                continue;
            }
            if (students_classes.get(i).size() > 40) {
                addExtraClass(i);
            }

        }
    }

    public void sortClasses(int left, int right) {
        int index1 = left, index2 = right;
        int middle = (left + right) / 2;
        int scheduleDisp = getHoursAvailable(middle);
        int studentDisp = getStudentsAvailable(middle);
        while (index1 <= index2) {
            int index1S = getHoursAvailable(index1);
            int index1SQ = getStudentsAvailable(index1);
            int index2SQ = getStudentsAvailable(index2);
            int index2S = getHoursAvailable(index2);
            while (index1S < scheduleDisp && index1SQ > studentDisp) {
                index1++;
                index1S = getHoursAvailable(index1);
                index1SQ = getStudentsAvailable(index1);
            }
            while (index2S > scheduleDisp && index2SQ < studentDisp) {
                index2--;
                index2S = getHoursAvailable(index2);
                index2SQ = getStudentsAvailable(index2);
            }
            if (index1 <= index2) {
                Class_UNITEC temp = new Class_UNITEC();
                temp.clone(classes.get(index1));
                classes.get(index1).clone(classes.get(index2));
                classes.get(index2).clone(temp);
                ArrayList<Student> tempS = students_classes.get(index1);
                students_classes.set(index1, students_classes.get(index2));
                students_classes.set(index2, tempS);
                ArrayList<Teacher> tempT = teachers_classes.get(index1);
                teachers_classes.set(index1, teachers_classes.get(index2));
                teachers_classes.set(index2, tempT);
                index1++;
                index2--;

            }
        }
        if (left < index1 - 1) {
            sortClasses(left, index1 - 1);
        }
        if (index1 < right) {
            sortClasses(index1, right);
        }

    }

    public int getHoursAvailable(int classIndex) {
        int quantity = 0;
        for (int i = 0; i < teachers_classes.get(classIndex).size(); i++) {
            quantity += teachers_classes.get(classIndex).get(i).getHours().size();
        }
        return quantity;
    }

    public int getStudentsAvailable(int classIndex) {
        int quantity = 0;
        for (int i = 0; i < students_classes.get(classIndex).size(); i++) {
            quantity += students_classes.get(classIndex).size();
        }
        return quantity;
    }

    public void fillSchedule() {
        for (int i = 0; i < teachers.size(); i++) {
            ArrayList<String> hours = teachers.get(i).getHours();
            for (int j = 0; j < hours.size(); j++) {
                switch (hours.get(j)) {
                    case "07:00":
                        teacherSchedule[i][0] = 1;
                        break;
                    case "08:30":
                        teacherSchedule[i][1] = 1;
                        break;
                    case "10:10":
                        teacherSchedule[i][2] = 1;
                        break;
                    case "11:30":
                        teacherSchedule[i][3] = 1;
                        break;
                    case "01:10":
                        teacherSchedule[i][4] = 1;
                        break;
                    case "02:20":
                        teacherSchedule[i][5] = 1;
                        break;
                    case "03:40":
                        teacherSchedule[i][6] = 1;
                        break;

                    case "05:10":
                        teacherSchedule[i][7] = 1;
                        break;
                    case "06:30":
                        teacherSchedule[i][8] = 1;
                        break;

                }
            }
        }
    }

    public void addExtraClass(int i) {
        Class_UNITEC newClass = new Class_UNITEC();
        newClass.setName(classes.get(i).getName());
        classes.add(newClass);
        teachers_classes.add(teachers_classes.get(i));
        students_classes.add(students_classes.get(i));

    }

    public void removeCTS(int i) {
        classes.remove(i);
        teachers_classes.remove(i);
        students_classes.remove(i);
    }

    public void getPlanningDynamic() {
        for (int i = 0; i < classes.size(); i++) {
            int studentQuantity = -1; //Students that can't take the class
            int notContinue = -1;
            int hour = -1;
            boolean flag = false;
            Teacher t = new Teacher();
            int teacherIndex = -1;
            int room = -1;
            for (int j = 0; j < teachers_classes.get(i).size() && !flag; j++) {
                int indexT = teachers.indexOf(teachers_classes.get(i).get(j));
                ArrayList<String> hours = teachers.get(indexT).getHours();
                for (int k = 0; k < hours.size(); k++) {
                    int hourIndex = getHourIndex(hours.get(k));

                    boolean isAvailable = teacherSchedule[indexT][hourIndex] == 1;
                    int tempNC = 0;
                    int tempQ = 0;
                    int freeRoom = -1;
                    for (int m = 0; m < classRoomNumber; m++) {
                        if (roomSchedule[hourIndex][m] == 0) {
                            freeRoom = m;
                            break;
                        }

                    }

                    if (freeRoom != -1 && isAvailable) {

                        for (int l = 0; l < students_classes.get(i).size(); l++) {
                            int indexS = students.indexOf(students_classes.get(i).get(l));
                            if (studentSchedule[indexS][hourIndex] == 1) {

                                tempQ++;
                            }
                        }
                        tempNC = notContinuedQuantity(hourIndex);
                        if (tempQ == 0 && tempNC == 0) {

                            classes.get(i).setTeacher(teachers.get(indexT));

                            teacherSchedule[indexT][hourIndex] = 0;
                            for (int l = 0; l < students_classes.get(i).size(); l++) {
                                int indexS = students.indexOf(students_classes.get(i).get(l));
                                if (studentSchedule[indexS][hourIndex] == 0) {
                                    studentSchedule[indexS][hourIndex] = 1;
                                    classes.get(i).addStudent(students.get(indexS));
                                }
                            }
                            roomSchedule[hourIndex][freeRoom] = 1;

                            classes.get(i).setHour(hours.get(k));
                            classes.get(i).setClassRoom("" + (freeRoom + 1));
                            flag = true;
                            break;
                        } else if ((tempQ < studentQuantity && tempNC < notContinue) || (studentQuantity == -1 && notContinue == -1)) {
                            studentQuantity = tempQ;
                            notContinue = tempNC;
                            hour = hourIndex;
                            room = freeRoom;
                            teacherIndex = indexT;
                            t = teachers.get(indexT);

                        }

                    }

                }

            }
            if (hour != -1 && room != -1 && teacherIndex != -1 && !flag) {

                classes.get(i).setTeacher(teachers.get(teacherIndex));
                teacherSchedule[teacherIndex][hour] = 0;
                roomSchedule[hour][room] = 1;
                classes.get(i).setHour(getHourbyIndex(hour));
                classes.get(i).setClassRoom("" + (room + 1));
                for (int l = 0; l < students_classes.get(i).size(); l++) {
                    int indexS = students.indexOf(students_classes.get(i).get(l));
                    if (studentSchedule[indexS][hour] == 0) {
                        studentSchedule[indexS][hour] = 1;
                        classes.get(i).addStudent(students.get(indexS));
                    }
                }

            }
        }
    }

    public String getHourbyIndex(int i) {
        String hour = "";
        switch (i) {
            case 0:
                hour = "07:00";
                break;
            case 1:
                hour = "08:30";
                break;
            case 2:
                hour = "10:10";
                break;
            case 3:
                hour = "11:30";
                break;
            case 4:
                hour = "01:10";
                break;
            case 5:
                hour = "02:20";
                break;
            case 6:
                hour = "03:40";
                break;

            case 7:
                hour = "05:10";
                break;
            case 8:
                hour = "06:30";
                break;

        }
        return hour;
    }

    public int getHourIndex(String hour) {
        int hourIndex = -1;
        switch (hour) {
            case "07:00":
                hourIndex = 0;
                break;
            case "08:30":
                hourIndex = 1;
                break;
            case "10:10":
                hourIndex = 2;
                break;
            case "11:30":
                hourIndex = 3;
                break;
            case "01:10":
                hourIndex = 4;
                break;
            case "02:20":
                hourIndex = 5;
                break;
            case "03:40":
                hourIndex = 6;
                break;

            case "05:10":
                hourIndex = 7;
                break;
            case "06:30":
                hourIndex = 8;
                break;
        }
        return hourIndex;
    }

    public int notContinuedQuantity(int hourIndex) {
        int q = 0;
        for (int i = 0; i < students.size(); i++) {
            boolean flag = true;
            for (int j = 0; j < 9; j++) {
                if (studentSchedule[i][j] == 1) {
                    flag = false;
                    break;
                }
            }
            if (!flag) {
                if (hourIndex == 0) {
                    if (studentSchedule[i][hourIndex + 1] == 0) {
                        q++;
                    }
                } else if (hourIndex == 8) {
                    if (studentSchedule[i][hourIndex - 1] == 0) {
                        q++;
                    }
                } else if (studentSchedule[i][hourIndex + 1] == 0 && studentSchedule[i][hourIndex - 1] == 0) {
                    q++;
                }

            }
        }
        return q;
    }

    public void calculateAverages() {

        for (int i = 0; i < students.size(); i++) {
            double class_quantity = 0;
            for (int j = 0; j < classes.size() && class_quantity < 5; j++) {
                if (classes.get(j).getStudents().indexOf(students.get(i)) > -1) {
                    class_quantity++;

                }
            }
            double tempQ = class_quantity;
            double class_count = 0;

            for (int j = 0; j < 9; j++) {
                if (j != 8) {
                    if (studentSchedule[i][j] == 1) {
                        class_count++;
                    }
                    if (studentSchedule[i][j] == 1 && studentSchedule[i][j + 1] == 0 && class_count < tempQ) {

                        class_quantity -= 0.5;
                    }

                }
            }

            studentAverage[i] = class_quantity;
        }
    }
    /**
     * @param args the command line arguments
     */
    ArrayList<Student> students;
    ArrayList<Teacher> teachers;
    ArrayList<Class_UNITEC> classes;
    ArrayList<ArrayList<Student>> students_classes;
    ArrayList<ArrayList<Teacher>> teachers_classes;
    int[][] teacherSchedule;
    int[][] studentSchedule;
    int[][] roomSchedule;
    double[] studentAverage;
    int classRoomNumber = 0;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tableClasses;
    private javax.swing.JTable tableStudents;
    // End of variables declaration//GEN-END:variables
}
